//
//  ListProtocols.swift
//  ViperToDo
//
//  Created Vladyslav Vdovychenko on 18.08.2020.
//  Copyright © 2020 Vladyslav Vdovychenko. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

//MARK: Wireframe -
protocol ListWireframeProtocol: class {
    
    static func createListModule() -> UIViewController
    
    /* Presenter -> Wireframe */
    
    func presentNewTaskScreen(from view: ListViewProtocol)

}
//MARK: Presenter -
protocol ListPresenterProtocol: class {

    var view: ListViewProtocol? { get set }
    var interactor: ListInteractorInputProtocol? { get set }
    var wireframe: ListWireframeProtocol? { get set }
    
    /* View -> Presenter */
    
    func viewDidLoad()
    func showNewTask()
}

//MARK: Interactor -
protocol ListInteractorOutputProtocol: class {

    /* Interactor -> Presenter */
    
    func didReceiveTasks(_ tasks: [Task])
    func onError(_ error: Error?)
}

protocol ListInteractorInputProtocol: class {

    var presenter: ListInteractorOutputProtocol?  { get set }
    var remoteDataManager: ListRemoteDataManagerInputProtocol? { get set }
    /* Presenter -> Interactor */
    
    func retrieveTaskList()
}

protocol ListDataManagerInputProtocol: class {
    /* Interactor -> DataManager */
}

protocol ListRemoteDataManagerInputProtocol: class {
    var remoteRequestHandler: ListRemoteDataManagerOutputProtocol? { get set }
    
    /* Interactor -> RemoteDataManager */
    
    func retrieveTaskList()
}

protocol ListRemoteDataManagerOutputProtocol: class {
    /* RemoteDataManager -> Interactor */
    
    func onTaskRetrieved(_ tasks: [Task])
    
    func onError(_ error: Error?)
}

//MARK: View -
protocol ListViewProtocol: class {

    var presenter: ListPresenterProtocol?  { get set }

    /* Presenter -> ViewController */
    
    func showTasks(with tasks: [Task])
    
    func showError(_ error: Error?)
}
